{"version":3,"sources":["constants/color.js","components/Header/Header.js","components/Button/InputButton.js","components/Input/InputArea.js","components/Button/Checkbox.js","components/Todo/TodoItem.js","components/Todo/AllTodos.js","App.js","serviceWorker.js","index.js"],"names":["HeaderStyle","backgroundColor","color","Header","className","style","Component","buttonStyle","width","height","border","fontSize","borderRadius","InputButton","this","props","name","onClick","addItemAndClear","InputArea","addInput","e","setState","inputValue","target","value","state","addItem","call","placeholder","onChange","Checkbox","type","toggleCompletion","TodoItem","getStyle","item","completed","colors","getPStyle","textDecoration","content","bind","id","AllTodos","allItems","items","map","todoItem","index","key","App","console","log","todos","length","changeCompletion","itemId","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.40c3a13c.chunk.js","sourcesContent":["export default {\n  baseColor : '#4870ff',\n  almostWhite: '#F0F2F7'\n}","import React, { Component } from 'react';\nimport '../../css/components/header.css';\nimport color from '../../constants/color.js';\n\n\nconst HeaderStyle = {\n  backgroundColor: 'none',\n  color: color.baseColor,\n}\n\n\nexport class Header extends Component {\n  render() {\n    return (\n      <div className=\"Header\" style= {HeaderStyle}>\n        <div className=\"container\">\n          <h1>Lazy Beaver</h1>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport color from '../../constants/color.js';\nimport '../../css/components/inputButton.css';\n\nconst buttonStyle ={\n  width: '40px',\n  height: '40px',\n  border: 'none',\n  backgroundColor: color.baseColor,\n  fontSize: '20px',\n  borderRadius: '20px',\n  color: 'white',\n}\n\n\nexport class InputButton extends Component {\n  render() {\n    return (\n      <button className={this.props.name} style={buttonStyle} onClick = {this.props.addItemAndClear}>+</button>\n    )\n  }\n}\n\nexport default InputButton;\n","import React, { Component } from 'react';\nimport InputButton from '../Button/InputButton';\nimport '../../css/components/inputArea.css';\n\nexport class InputArea extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      inputValue : ''\n    }\n  }\n\n  addInput = (e)=>{\n    this.setState ({\n      inputValue : e.target.value\n    })\n  }\n\n  addItemAndClear = () =>{\n    if (this.state.inputValue){\n      this.props.addItem.call(this, this.state.inputValue);\n      this.setState({\n        inputValue : ''\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"InputArea\">\n        <input className=\"newInput\" placeholder=\"Add new Task\" value={this.state.inputValue} onChange = {(e)=>this.addInput(e)}></input>\n        <InputButton name=\"inputButton\" addItemAndClear={this.addItemAndClear}/>\n      </div>\n    )\n  }\n}\n\nexport default InputArea;\n","import React, { Component } from 'react';\nimport '../../css/components/checkBox.css';\n\nexport class Checkbox extends Component {\n  render() {\n    return (\n      <input type=\"checkbox\" className=\"itemCheckBox\" onChange={this.props.toggleCompletion}></input>\n    )\n  }\n}\n\nexport default Checkbox;\n","import React, { Component } from 'react';\nimport Checkbox from '../Button/Checkbox';\nimport colors from '../../constants/color';\n\nexport class TodoItem extends Component {\n\n  getStyle = () => {\n    return {\n      backgroundColor : this.props.item.completed ? colors.almostWhite : 'white',\n    }\n  }\n\n  getPStyle = () => {\n    return {\n      textDecoration : this.props.item.completed ? 'line-through' : 'none',\n    }\n  }\n\n  render() {\n    return (\n      <li style={this.getStyle()}>\n        <p style={this.getPStyle()}>{this.props.item.content}</p>\n        <Checkbox toggleCompletion= {this.props.toggleCompletion.bind(this, this.props.item.id)} />\n      </li>\n    )\n  }\n}\n\nexport default TodoItem\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport '../../css/components/todo.css';\n\nexport class AllTodos extends Component {\n\n  render() {\n    const allItems = this.props.items;\n    return (\n      <div className=\"AllTodos\">\n        <ul>\n          {\n            allItems.map((todoItem, index) => <TodoItem key={todoItem.id} item={todoItem} toggleCompletion={(id) => this.props.toggleCompletion.call(this, id)}/>)\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default AllTodos\n","import React from 'react';\nimport Header from './components/Header/Header';\nimport InputArea from './components/Input/InputArea';\nimport AllTodos from './components/Todo/AllTodos';\nimport './App.css';\nimport './css/reset.css';\nimport './css/style.css';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      todos: [\n        {\n          id: 0,\n          content: 'Hello mate',\n          completed: false\n        },\n        {\n          id: 1,\n          content: 'Hello check',\n          completed: false\n        }\n      ]\n    }\n  }\n\n  addItem = (item) => {\n    console.log('hey')\n    this.setState({\n      todos : [...this.state.todos,{\n        id: this.state.todos.length,\n        content: item,\n        completed: false\n      }]\n    })\n  }\n\n  changeCompletion = (id)=>{\n    this.setState({\n      todos: this.state.todos.map((todoItem) => {\n        if (todoItem.id === id) todoItem.completed = !todoItem.completed;\n        return todoItem;\n      })\n    })\n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"container\">\n          <InputArea addItem = {this.addItem}/>\n          <AllTodos items={this.state.todos} toggleCompletion={(itemId)=> this.changeCompletion(itemId)}/>\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}