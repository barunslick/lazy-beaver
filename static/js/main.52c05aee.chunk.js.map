{"version":3,"sources":["constants/states.js","constants/color.js","components/Header/Header.js","components/Button/Checkbox.js","components/Todo/TodoItem.js","components/Todo/AllTodos.js","components/Button/InputButton.js","components/Input/InputArea.js","components/Button/ViewChangeBtn.js","components/ViewStates/ViewState.js","components/Input/SearchArea.js","App.js","serviceWorker.js","index.js"],"names":["ALL","COMPLETED","REMANING","HeaderStyle","backgroundColor","color","Header","className","style","Component","Checkbox","type","checked","this","props","item","completed","onChange","toggleCompletion","TodoItem","getStyle","colors","getPStyle","textDecoration","content","bind","id","AllTodos","filterTodoItems","currentShowing","filterFromSearch","searchText","includes","allItems","items","console","log","filter","map","todoItem","key","call","buttonStyle","width","height","border","fontSize","borderRadius","InputButton","name","onClick","addItemAndClear","InputArea","addInput","e","setState","inputValue","target","value","state","addItem","placeholder","ViewChangeBtn","changeViewState","text","ViewState","noOfItems","Object","entries","states","index","newStateId","SearchArea","changeSearchText","clearText","App","todos","length","changeCompletion","newState","itemId","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.52c05aee.chunk.js","sourcesContent":["export default {\n  ALL: 0,\n  COMPLETED: 1,\n  REMANING: 2  \n}","export default {\n  baseColor : '#4870ff',\n  almostWhite: '#F0F2F7'\n}","import React, { Component } from 'react';\nimport '../../css/components/header.css';\nimport color from '../../constants/color.js';\n\n\nconst HeaderStyle = {\n  backgroundColor: 'none',\n  color: color.baseColor,\n}\n\n\nexport class Header extends Component {\n  render() {\n    return (\n      <div className=\"Header\" style= {HeaderStyle}>\n          <h1>Lazy Beaver</h1>\n      </div>\n    )\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport '../../css/components/checkBox.css';\n\nexport class Checkbox extends Component {\n\n  render() {\n    return (\n      <input type=\"checkbox\" className=\"itemCheckBox\" checked = {this.props.item.completed} onChange={this.props.toggleCompletion}></input>\n    )\n  }\n}\n\nexport default Checkbox;\n","import React, { Component } from 'react';\nimport Checkbox from '../Button/Checkbox';\nimport colors from '../../constants/color';\n\nexport class TodoItem extends Component {\n\n  getStyle = () => {\n    return {\n      backgroundColor : this.props.item.completed ? colors.almostWhite : 'white',\n    }\n  }\n\n  getPStyle = () => {\n    return {\n      textDecoration : this.props.item.completed ? 'line-through' : 'none',\n    }\n  }\n\n  render() {\n    return (\n      <li style={this.getStyle()}>\n        <p style={this.getPStyle()}>{this.props.item.content}</p>\n        <Checkbox item ={this.props.item} toggleCompletion= {this.props.toggleCompletion.bind(this, this.props.item.id)} />\n      </li>\n    )\n  }\n}\n\nexport default TodoItem\n","import TodoItem from './TodoItem';\nimport React, { Component } from 'react';\nimport '../../css/components/todo.css';\n\nexport class AllTodos extends Component {\n\n  filterTodoItems = (item) => {\n    if (this.props.currentShowing === 0){\n      return item;\n    }else if( this.props.currentShowing === 1 && item.completed === true ){\n      return item;\n    }else if(this.props.currentShowing === 2 && item.completed === false){\n      return item;\n    }\n  }\n\n  filterFromSearch = (item)=>{\n    if (this.props.searchText === '') return true;\n    if (item.content.includes(this.props.searchText)){\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    const allItems = this.props.items;\n    console.log(this.props.searchText)\n    return (\n      <div className=\"AllTodos\">\n        <ul>\n          {\n            allItems\n            .filter(item => this.filterFromSearch(item))\n            .filter(this.filterTodoItems)\n            .map((todoItem) => <TodoItem key={todoItem.id} item={todoItem} toggleCompletion={(id) => this.props.toggleCompletion.call(this, id)}/>)\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default AllTodos\n","import React, { Component } from 'react';\nimport color from '../../constants/color.js';\nimport '../../css/components/inputButton.css';\n\nconst buttonStyle ={\n  width: '40px',\n  height: '40px',\n  border: 'none',\n  backgroundColor: color.baseColor,\n  fontSize: '20px',\n  borderRadius: '20px',\n  color: 'white',\n}\n\n\nexport class InputButton extends Component {\n  render() {\n    return (\n      <button className={this.props.name} style={buttonStyle} onClick = {this.props.addItemAndClear}>+</button>\n    )\n  }\n}\n\nexport default InputButton;\n","import React, { Component } from 'react';\nimport InputButton from '../Button/InputButton';\nimport '../../css/components/inputArea.css';\n\nexport class InputArea extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      inputValue : ''\n    }\n  }\n\n  addInput = (e)=>{\n    this.setState ({\n      inputValue : e.target.value\n    })\n  }\n\n  addItemAndClear = () =>{\n    if (this.state.inputValue){\n      this.props.addItem.call(this, this.state.inputValue);\n      this.setState({\n        inputValue : ''\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"InputArea\">\n        <input className=\"newInput\" placeholder=\"Add new Task\" value={this.state.inputValue} onChange = {(e)=>this.addInput(e)}></input>\n        <InputButton name=\"inputButton\" addItemAndClear={this.addItemAndClear}/>\n      </div>\n    )\n  }\n}\n\nexport default InputArea;\n","import React, { Component } from 'react';\nimport colors from '../../constants/color';\nimport '../../css/components/viewChangeBtn.css';\n\nexport class ViewChangeBtn extends Component {\n\n  getStyle = () => {\n    if (this.props.currentShowing === this.props.id){\n      return {\n        backgroundColor : colors.baseColor,\n        color: 'white',\n      }\n    }\n  }\n\n  render() {\n    return (\n    <button className=\"ViewChangeBtn\" onClick = {this.props.changeViewState.bind(this, this.props.id)} style = {this.getStyle()}>{this.props.text}</button>\n    )\n  }\n}\n\nexport default ViewChangeBtn;\n","import React, { Component } from 'react';\nimport states from '../../constants/states';\nimport ViewChangeBtn from '../Button/ViewChangeBtn';\nimport '../../css/components/viewState.css';\n\n\nexport class ViewState extends Component {\n\n  render() {\n    if (this.props.noOfItems){\n    return (\n      <div className=\"ViewState\">\n        {\n          Object.entries(states)\n          .map((item, index) => <ViewChangeBtn key = {index} text={item[0]} id = {index} currentShowing = {this.props.currentShowing} changeViewState = {(newStateId) => this.props.changeViewState.call(this, newStateId)}/>) \n        }\n      </div>\n    )\n  }else{\n    return null;\n  }\n  }\n}\n\nexport default ViewState;\n","import React, { Component } from 'react';\nimport '../../css/components/searchArea.css';\n\n\nexport class SearchArea extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ''\n    }\n  }\n\n  addInput = (e) => {\n    this.setState({\n      inputValue: e.target.value\n    }, () => {\n      this.props.changeSearchText.call(this, this.state.inputValue)\n    })\n  }\n\n  clearText = () => {\n    this.setState({\n      inputValue: ''\n    }, () => {\n      this.props.changeSearchText.call(this, this.state.inputValue)\n    })\n  }\n\n  render() {\n    if (this.props.noOfItems) {\n      return (\n        <div className=\"SearchArea\">\n          <input className=\"searchtext\" placeholder=\"Search\" value={this.state.inputValue} onChange={this.addInput}></input>\n          <button className=\"searchBtn\" onClick={this.clearText}><i className=\"fas fa-times\"></i></button>\n        </div>\n      )\n    }else{\n      return null;\n    }\n  }\n}\n\nexport default SearchArea\n","import React from 'react';\nimport states from './constants/states';\nimport Header from './components/Header/Header';\nimport AllTodos from './components/Todo/AllTodos';\nimport InputArea from './components/Input/InputArea';\n\nimport ViewState from './components/ViewStates/ViewState';\nimport SearchArea from './components/Input/SearchArea';\n\nimport './App.css';\nimport './css/reset.css';\nimport './css/style.css';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      todos: [\n      ],\n      searchText: '',\n      currentShowing: states.ALL\n    }\n  }\n\n  addItem = (item) => {\n    this.setState({\n      todos : [...this.state.todos,{\n        id: this.state.todos.length,\n        content: item,\n        completed: false\n      }]\n    })\n  }\n\n  changeCompletion = (id)=>{\n    this.setState({\n      todos: this.state.todos.map((todoItem) => {\n        if (todoItem.id === id) todoItem.completed = !todoItem.completed;\n        return todoItem;\n      })\n    })\n  }\n\n  changeViewState = (newState) => {\n    this.setState({\n      currentShowing: newState\n    })\n  }\n\n  changeSearchText = (text) => {\n    this.setState ({\n      searchText: text,\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header />\n          <InputArea addItem = {this.addItem}/>    \n          <ViewState noOfItems = {this.state.todos.length} currentShowing = {this.state.currentShowing} changeViewState= {(newState) => this.changeViewState (newState)}/>\n          <SearchArea noOfItems = {this.state.todos.length} changeSearchText = {this.changeSearchText} />\n          <AllTodos items={this.state.todos} currentShowing = {this.state.currentShowing} toggleCompletion={(itemId)=> this.changeCompletion(itemId)} searchText = {this.state.searchText}/>\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}